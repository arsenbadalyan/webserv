server
{
	listen 127.0.0.1:8080;
	root mysite/;
	cgi php /usr/bin/php-cgi;
	location blabla 
	{

	}

	location /test/barev
	{
		autoindex on asdsad ;
		return 301;
		allow_method POST;
		root some/other/path;
	}

	location /test/index.html
	{

	}


	autoindex on;
	index 


	listen
	server_name
	index
	autoindex
	root
	return
	upload_dir
	allow_method


	listen: Specify the IP and port for the server to bind to.  --> 127.0.0.1:8080 defolt ??
	server_name: Specify names that HTTP clients can send via the Host header in HTTP requests.--> defolt ""  
															--> example.org  www.example.org;
	root: Set the root path of the server directory.   --> /www/data; --> defolt /var/www; ??
	allow_methods: Explicitly define allowed HTTP methods for this server. --> GET, POST, DELETE --> defolt all
	upload_dir: Configure the directory where the server should store files from multipart form data. --> defold none
	error_page: Craft custom error pages based on response status codes. --> error_page 500 502 503 504 /custom_50x.html;
													--> error_page 404 /custom_404.html;  --> defolt your
	return: Set up redirection URLs for specific scenarios.  --> return 301 http://www.example.com/moved/here;
															--> defolt none
	cgi: Enable CGI script execution for handling Python and PHP scripts. --> defold ?? --->> on kam off sarqel
	index: Specify the default index file.     --> defolt   index index.html index2.html; -->> sarqel vector<string>
	autoindex: Enable directory listing when no index file is found. --> defold off  --> on
	client_max_body_size: Set the maximum allowed size of the client request body. --> 2KB ?? --> defold 1MB


	byte --> 18446744073709551615
	kilo --> 18014398509481983
	M --> 17592186044415
	G --> 17179869183
	//index
	-g3 -fsanitize=address

	200
	404
	400
	

}


bool CreatMainServers::startServer(std::vector<Server> & serverlist)
{
	char buffer[BUFFER_SIZE];
	if (!CreatMainServers::starting(serverlist))
	{
		return (false);
	}
	struct timeval  tv;
	fd_set	rfds;
	fd_set	wfds;
	fd_set	efds;
	tv.tv_sec = 0;
	tv.tv_usec = 0;
	std::string q;
	while (q != "#")
	{
		FD_ZERO(&rfds);
		FD_ZERO(&wfds);
		FD_ZERO(&efds);
		int a = 3;
		//serveri diskriptrner kardalu hamar
		for (size_t j = 0; j < serverlist.size(); j++)
		{
			for (size_t i = 0; i < serverlist[j].getMainServer().size(); i++)
			{
				if (serverlist[j].getMainServer()[i].getServerFD() > a)
					a = serverlist[j].getMainServer()[i].getServerFD();
				FD_SET(serverlist[j].getMainServer()[i].getServerFD(), &rfds);
			}
			
		}
		for (size_t j = 0; j < serverlist.size(); j++)
		{
			for (size_t i = 0; i < serverlist[j].getClientSocket().size(); i++)
			{
				if (serverlist[j].getClientSocket()[i] > a)
					a = serverlist[j].getClientSocket()[i];
				FD_SET(serverlist[j].getClientSocket()[i], &wfds);
			}
			
		}

		for (size_t j = 0; j < serverlist.size(); j++)
		{
			for (size_t i = 0; i < serverlist[j].getServerSocket().size(); i++)
			{
				if (serverlist[j].getServerSocket()[i] > a)
					a = serverlist[j].getServerSocket()[i];
				FD_SET(serverlist[j].getServerSocket()[i], &rfds);
			}
			
		}

		// ---------------------------------
		int res = select(a + 1, &rfds, &wfds, &efds, &tv );
		// ----------------------------------
		std::cout << "selecti tvat res = " << res << std::endl;


		//stuguma serveri diskriptor kardalu hamar

		for (size_t j = 0; j < serverlist.size() && res >= 0; j++)
		{
			for (size_t i = 0; i < serverlist[j].getServerSocket().size(); i++)
			{
				std::cout << "te Server kardalu hamar patrasta kardalu hamar -> " << serverlist[j].getServerSocket()[i] << \
				" == " << FD_ISSET(serverlist[j].getServerSocket()[i], &wfds) << std::endl;
				if(FD_ISSET(serverlist[j].getServerSocket()[i], &wfds))
				{
					bzero(buffer,BUFFER_SIZE);
					std::cout << "aaaaaa____1\n";
					std::cout << "diskrip blok = " << serverlist[j].getServerSocket()[i] << std::endl;

					int aaa = recv(serverlist[j].getServerSocket()[i], buffer, BUFFER_SIZE ,0);

					std::cout << "aaaaaa____2\n";
					std::cout << "serveri kardatatn soketic = " << aaa << std::endl; 
					std::cout << "aaaaaa____3\n";
					std::cout << buffer << std::endl;

					serverlist[j].getClientSocket().push_back(serverlist[j].getServerSocket()[i]);
					serverlist[j].getServerSocket().erase(serverlist[j].getServerSocket().begin() + i);
				}
				else{
					close(serverlist[j].getServerSocket()[i]);
				}
			}
			
		}

		// stugum em clienti fd grelu hamar
		for (size_t j = 0; j < serverlist.size() && res >= 0; j++)
		{
			for (size_t i = 0; i < serverlist[j].getClientSocket().size(); i++)
			{
				std::cout << "te client patrasta grelu hamar -> " << serverlist[j].getClientSocket()[i] << \
				" == " << FD_ISSET(serverlist[j].getClientSocket()[i], &wfds) << std::endl;
				if(FD_ISSET(serverlist[j].getClientSocket()[i], &wfds))
				{
					int file = open("index.html", O_RDONLY);
					bzero(buffer,BUFFER_SIZE);
					if (file >= 0)
					{
						read(file, buffer, BUFFER_SIZE);
						std::string resp;
						resp += buffer;

						// int aaa = write(serverlist[j].getClientSocket()[i], (void*)(resp.c_str()), resp.size());
						// if (aaa < 0)
						// {
						// 	std::cout << "error write \n";
						// 	std::string ttt;
						// 	std::cin >> ttt;
						// 	(void)ttt;
						// }

						// std::cout << resp;
						std::cout << "serveri grat soketum send = " << \
						send(serverlist[j].getClientSocket()[i], resp.c_str(), resp.size(), 0) << std::endl;
						// aaa << std::endl;
						close(file);
					}
					//uxarkum u jnjuma fd
					close(serverlist[j].getClientSocket()[i]);
					serverlist[j].getClientSocket().erase(serverlist[j].getClientSocket().begin() + i);
				}
			}
			
		}
		//stugum em serveri fd kardalu hamar
		for (size_t j = 0; j < serverlist.size() && res >= 0; j++)
		{
			for (size_t i = 0; i < serverlist[j].getMainServer().size(); i++)
			{
				// std::cout << "ERROR 1 \n";
				std::cout << "j == " << j << " i == " << i << " diskrip = " << serverlist[j].getMainServer()[i].getServerFD() << std::endl;
				std::cout << "grelu hamar servri port hamar -> " << serverlist[j].getPort()[i] << \
				" == " << FD_ISSET(serverlist[j].getMainServer()[i].getServerFD(), &rfds) << std::endl;
				if (FD_ISSET(serverlist[j].getMainServer()[i].getServerFD(), &rfds))
				{
					std::cout << "aaaaaaaaaaaaaaaaaaaaaaaaa_1\n";
				    socklen_t siz = sizeof(serverlist[j].getMainServer()[i].getServerAddress());
					serverlist[j].getServerSocket().push_back(accept(serverlist[j].getMainServer()[i].getServerFD(), \
					reinterpret_cast<struct sockaddr*>(&(serverlist[j].getMainServer()[i].getServerAddress())), &siz));
					std::cout << "serveri tvat darnuma client fd = " << (serverlist[j].getServerSocket()[serverlist[j].getServerSocket().size() - 1]) << std::endl;
					std::cout << "aaaaaaaaaaaaaaaaaaaaaaaaa_2\n";

					if ((serverlist[j].getServerSocket()[serverlist[j].getServerSocket().size() - 1]) < 0)
					{
						serverlist[j].getServerSocket().erase(serverlist[j].getServerSocket().begin() + serverlist[j].getServerSocket().size() - 1);
						std::cout << "ERROR Client 444\n";
					}
				}
			}
		}
		std::cin >> q;
		// sleep(1);
		std::cout << "continue...\n";
	}
	return true;
}